/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SkyBudsMetadataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeMetadata"
      | "deleteTokenMetadata"
      | "generateTokenURI"
      | "getBase64Uri"
      | "getColorHex"
      | "getEncodedMetadata"
      | "getLaziness"
      | "getLazinessFormatted"
      | "getMetadata"
      | "getSpeed"
      | "getSpeedFormatted"
      | "getWearables"
      | "hasWearable"
      | "hexStringToUint"
      | "isTalkative"
      | "owner"
      | "renounceOwnership"
      | "setMetadata"
      | "tokenDataExists"
      | "transferOwnership"
      | "uintToHexString"
      | "updateBase64Uri"
      | "updateWearables"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MetadataUpdated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decodeMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTokenMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase64Uri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColorHex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncodedMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaziness",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLazinessFormatted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpeedFormatted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWearable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hexStringToUint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTalkative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [
      BigNumberish,
      BigNumberish[],
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDataExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uintToHexString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBase64Uri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWearables",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBase64Uri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColorHex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncodedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaziness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLazinessFormatted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpeedFormatted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWearable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hexStringToUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTalkative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDataExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintToHexString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBase64Uri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWearables",
    data: BytesLike
  ): Result;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    encodedMetadata: BigNumberish,
    base64Uri: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    encodedMetadata: bigint,
    base64Uri: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    encodedMetadata: bigint;
    base64Uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SkyBudsMetadata extends BaseContract {
  connect(runner?: ContractRunner | null): SkyBudsMetadata;
  waitForDeployment(): Promise<this>;

  interface: SkyBudsMetadataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeMetadata: TypedContractMethod<
    [metadata: BigNumberish],
    [
      [bigint[], boolean, bigint, bigint, string] & {
        wearableIds: bigint[];
        isTalkative: boolean;
        speed: bigint;
        laziness: bigint;
        color: string;
      }
    ],
    "view"
  >;

  deleteTokenMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  generateTokenURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getBase64Uri: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getColorHex: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEncodedMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getLaziness: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getLazinessFormatted: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, bigint[], boolean, bigint, bigint, string] & {
        encodedMetadata: bigint;
        base64Uri: string;
        wearableIds: bigint[];
        isTalkative_: boolean;
        speed: bigint;
        laziness: bigint;
        color: string;
      }
    ],
    "view"
  >;

  getSpeed: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getSpeedFormatted: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getWearables: TypedContractMethod<
    [metadata: BigNumberish],
    [bigint[]],
    "view"
  >;

  hasWearable: TypedContractMethod<
    [tokenId: BigNumberish, wearableId: BigNumberish],
    [boolean],
    "view"
  >;

  hexStringToUint: TypedContractMethod<[hexString: string], [bigint], "view">;

  isTalkative: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMetadata: TypedContractMethod<
    [
      tokenId: BigNumberish,
      wearableIds: BigNumberish[],
      isTalkative_: boolean,
      speed: BigNumberish,
      laziness: BigNumberish,
      color: string,
      base64Uri: string
    ],
    [void],
    "nonpayable"
  >;

  tokenDataExists: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uintToHexString: TypedContractMethod<[value: BigNumberish], [string], "view">;

  updateBase64Uri: TypedContractMethod<
    [tokenId: BigNumberish, base64Uri: string],
    [void],
    "nonpayable"
  >;

  updateWearables: TypedContractMethod<
    [tokenId: BigNumberish, wearableIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeMetadata"
  ): TypedContractMethod<
    [metadata: BigNumberish],
    [
      [bigint[], boolean, bigint, bigint, string] & {
        wearableIds: bigint[];
        isTalkative: boolean;
        speed: bigint;
        laziness: bigint;
        color: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deleteTokenMetadata"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateTokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBase64Uri"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getColorHex"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncodedMetadata"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLaziness"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLazinessFormatted"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, bigint[], boolean, bigint, bigint, string] & {
        encodedMetadata: bigint;
        base64Uri: string;
        wearableIds: bigint[];
        isTalkative_: boolean;
        speed: bigint;
        laziness: bigint;
        color: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSpeed"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSpeedFormatted"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getWearables"
  ): TypedContractMethod<[metadata: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasWearable"
  ): TypedContractMethod<
    [tokenId: BigNumberish, wearableId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hexStringToUint"
  ): TypedContractMethod<[hexString: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTalkative"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      wearableIds: BigNumberish[],
      isTalkative_: boolean,
      speed: BigNumberish,
      laziness: BigNumberish,
      color: string,
      base64Uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenDataExists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uintToHexString"
  ): TypedContractMethod<[value: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateBase64Uri"
  ): TypedContractMethod<
    [tokenId: BigNumberish, base64Uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWearables"
  ): TypedContractMethod<
    [tokenId: BigNumberish, wearableIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MetadataUpdated(uint256,uint256,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
