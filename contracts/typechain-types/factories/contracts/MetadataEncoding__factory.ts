/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MetadataEncoding,
  MetadataEncodingInterface,
} from "../../contracts/MetadataEncoding";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "metadata",
        type: "uint256",
      },
    ],
    name: "decodeMetadata",
    outputs: [
      {
        internalType: "uint256[]",
        name: "wearableIds",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "isTalkative",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "speed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "laziness",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "color",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "metadata",
        type: "uint256",
      },
    ],
    name: "getWearables",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "hexString",
        type: "string",
      },
    ],
    name: "hexStringToUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "uintToHexString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576107f1908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063232f06b7146104d45780634a4044271461022e57806387fb35a71461013757639927a9301461004857600080fd5b34610132576020366003190112610132576004356101606040519061006d818361054f565b600a8252601f190136602083013760005b600a811061010457506100c0916100ea90607f606c82901c166100a9607383901c62ffffff166105de565b90607f60405196879660a0885260a0880190610571565b936001808260641c1614602088015260651c1660408601526060850152838203608085015261052a565b0390f35b634e487b7160e01b600052601160045260246000fd5b600a810290808204600a14811517156100ee57600191846103ff911c1661012b82856107a7565b520161007e565b600080fd5b3461013257602036600319011261013257604051600060043561016061015d818561054f565b600a8452601f1901366020850137815b600a81106101e35750506101808161078f565b9161018e604051938461054f565b818352601f1961019d8361078f565b0136602085013760005b8281106101c457604051602080825281906100ea90820187610571565b806101d1600192846107a7565b516101dc82876107a7565b52016101a7565b600a8102818104600a14821517156100ee57826103ff911c168061020b575b5060010161016d565b61021884869593956107a7565b5260001981146100ee5760018091019290610202565b346101325760203660031901126101325760043567ffffffffffffffff8111610132573660238201121561013257806004013567ffffffffffffffff81116104be5760405190610288601f8201601f19166020018361054f565b8082526020820192366024838301011161013257816000926024602093018637830101526000918290825160028110156103f2575b5050915b81518310156103e7576102d483836105b7565b5160f81c60006030821015806103dc575b156103225750602f190160ff81116100ee575b8160041b91808304601014901517156100ee5760ff1681018091116100ee576001909201916102c1565b6061821015806103d1575b1561034d57506060190160ff81116100ee57610348906105a5565b6102f8565b906041811015806103c6575b1561038957604019019060ff82116103755750610348906105a5565b634e487b7160e01b81526011600452602490fd5b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103432bc1031b430b930b1ba32b960591b6044820152606490fd5b506046811115610359565b50606682111561032d565b5060398211156102e5565b602090604051908152f35b156104445780516001600160f81b031916600360fc1b1480610458575b1561042057505060025b83806102bd565b82511561044457516001600160f81b03191660dd60f81b0161041957506001610419565b634e487b7160e01b84526032600452602484fd5b50825160011015610444576021830180516001600160f81b031916600f60fb1b14908115610487575b5061040f565b90508351600110156104aa57516001600160f81b031916600b60fb1b1485610481565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b600052604160045260246000fd5b34610132576020366003190112610132576100ea6104f36004356105de565b60405191829160208352602083019061052a565b60005b83811061051a5750506000910152565b818101518382015260200161050a565b9060209161054381518092818552858086019101610507565b601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff8211176104be57604052565b906020808351928381520192019060005b81811061058f5750505090565b8251845260209384019390920191600101610582565b60ff600a9116019060ff82116100ee57565b9081518110156105c8570160200190565b634e487b7160e01b600052603260045260246000fd5b906000806040516105f060608261054f565b602681527f75696e74546f486578537472696e672063616c6c656420776974682076616c756020820152650329d1012b9960d51b6040820152604051610667816106536020820194632d839cb360e21b865260406024840152606483019061052a565b88604483015203601f19810183528261054f565b51906a636f6e736f6c652e6c6f675afa50811561076857604080519061068d818361054f565b600682526020820190601f1981013683376005945b600f8116600a81101561072d5760300160ff81116100ee5760f81b6001600160f81b03191660001a6106d487866105b7565b535b60041c9480156106f05780156100ee5760001901946106a2565b506107199394509160219161072a9351948592602360f81b602085015251809285850190610507565b81010301601f19810183528261054f565b90565b6009190160ff81116100ee5760ff606191160160ff81116100ee5760f81b6001600160f81b03191660001a61076287866105b7565b536106d6565b905060405161077860408261054f565b60078152660233030303030360cc1b602082015290565b67ffffffffffffffff81116104be5760051b60200190565b80518210156105c85760209160051b01019056fea2646970667358221220e6e8593906e057dad48e9e91d7e5c6f518e9e9425d7e4b1f652a8620c92f343964736f6c634300081c0033";

type MetadataEncodingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetadataEncodingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetadataEncoding__factory extends ContractFactory {
  constructor(...args: MetadataEncodingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MetadataEncoding & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MetadataEncoding__factory {
    return super.connect(runner) as MetadataEncoding__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetadataEncodingInterface {
    return new Interface(_abi) as MetadataEncodingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MetadataEncoding {
    return new Contract(address, _abi, runner) as unknown as MetadataEncoding;
  }
}
